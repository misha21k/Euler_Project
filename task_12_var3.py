"""
Highly divisible triangular number
The sequence of triangle numbers is generated by adding the natural numbers.
So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. The first ten terms would be:
1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...
Let us list the factors of the first seven triangle numbers:
1: 1
3: 1, 3
6: 1, 2, 3, 6
10: 1, 2, 5, 10
15: 1, 3, 5, 15
21: 1, 3, 7, 21
28: 1, 2, 4, 7, 14, 28
We can see that 28 is the first triangle number to have over five divisors.
What is the value of the first triangle number to have over five hundred divisors?
"""


import time

def list_prime(n):
    composite_and_prime = {}  # key is composite number, value is prime
    next = 1  # next number, which we check
    result = [2]  # list of prime number
    while len(result) < n:
        next += 2  # we check only odd number
        if next in composite_and_prime:  # next is composite number
            prime = composite_and_prime.pop(next)
            composite = next + 2*prime  # we seek new composite number for prime
            while composite in composite_and_prime:
                composite += 2*prime
            composite_and_prime[composite] = prime
        else:  # next is prime number
            composite_and_prime[next**2] = next
            result.append(next)
    return result

def main():
    n = 1  # number of triangular number
    primes = list_prime(9)
    while True:
        n += 1
        triangular = n*(n + 1)//2  # current triangular number
        quotient = triangular
        count_divisors = 1

        for divisor in primes:
            degree = 0
            while quotient % divisor == 0:
                quotient //= divisor
                degree += 1
            count_divisors *= degree + 1
            if quotient == 1:
                break

        if count_divisors > 500:
            break

    print(triangular)


t1 = time.time()
main()
t2 = time.time()
print(t2 - t1)