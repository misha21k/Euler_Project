"""
Highly divisible triangular number
The sequence of triangle numbers is generated by adding the natural numbers.
So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. The first ten terms would be:
1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...
Let us list the factors of the first seven triangle numbers:
1: 1
3: 1, 3
6: 1, 2, 3, 6
10: 1, 2, 5, 10
15: 1, 3, 5, 15
21: 1, 3, 7, 21
28: 1, 2, 4, 7, 14, 28
We can see that 28 is the first triangle number to have over five divisors.
What is the value of the first triangle number to have over five hundred divisors?
"""


import time

def main():
    n = 1  # number of triangular number
    n_is_even = False  # number is even or odd
    while True:
        n += 1
        n_is_even = not n_is_even
        if n_is_even:
            n1 = n + 1
            n2 = n // 2
        else:
            n1 = n
            n2 = (n + 1)//2
        triangular = n1 * n2  # current triangular number
        if (n1 ** 0.5).is_integer():
            count1 = 3  # 1, itself and n1**0.5
        else:
            count1 = 2  # 1 and itself
        if (n2 ** 0.5).is_integer():
            count2 = 3  # 1, itself and n2**0.5
        else:
            count2 = 2  # 1 and itself
        for divisor in range(2, int(n1 ** 0.5)):  # from 2 to square root of n1
            if n1 % divisor == 0:
                count1 += 2  # current divisor and n1 / divisor
        for divisor in range(2, int(n2 ** 0.5)):  # from 2 to square root of n2
            if n2 % divisor == 0:
                count2 += 2  # current divisor and n2 / divisor
        count_divisors = count1 * count2  # for current triangular number
        if count_divisors > 500:
            break

    print(triangular)

t1 = time.time()
main()
t2 = time.time()
print(t2 - t1)