"""
Highly divisible triangular number
The sequence of triangle numbers is generated by adding the natural numbers.
So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. The first ten terms would be:
1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...
Let us list the factors of the first seven triangle numbers:
1: 1
3: 1, 3
6: 1, 2, 3, 6
10: 1, 2, 5, 10
15: 1, 3, 5, 15
21: 1, 3, 7, 21
28: 1, 2, 4, 7, 14, 28
We can see that 28 is the first triangle number to have over five divisors.
What is the value of the first triangle number to have over five hundred divisors?
"""


import time

def main():
    natural = 1  # current natural number
    triangular = 1  # current triangular number
    count_divisors = 1  # divisors' count of triangular number
    while count_divisors <= 500:
        natural += 1
        triangular += natural
        count_divisors = 2  # current triangular number has two divisors - 1 and itself
        for divisor in range(2, int(triangular ** 0.5) + 1):  # from 2 to square root of triangular
            if triangular % divisor == 0:
                count_divisors += 2  # triangular number has yet two divisors - divisor and triangular // divisor
        if (triangular ** 0.5).is_integer():
            count_divisors -= 1  # divisor triangular ** 0.5 is counted two time, it is needed correct
    print(triangular)

t1 = time.time()
main()
t2 = time.time()
print(t2 - t1)
